{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luren\\\\Documents\\\\GitHub\\\\netflix-clone-diy\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const youtubeOpts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const movieClicked = moviename => {\n    console.log(moviename);\n    if (trailerUrl !== \"\") setTrailerUrl(\"\");else {\n      movieTrailer(moviename).then(url => {\n        const urlParamV = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParamV.get(\"v\"));\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScrollContainer, {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => movieClicked(movie.name || movie.title || movie.orginal_name),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}` //use && if theres no else or : otherwise use ?\n        ,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), trailerUrl !== \"\" && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: youtubeOpts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/luren/Documents/GitHub/netflix-clone-diy/src/Row.js"],"names":["React","useState","useEffect","axios","ScrollContainer","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","youtubeOpts","height","width","playerVars","autoplay","movieClicked","moviename","console","log","then","url","urlParamV","URLSearchParams","URL","search","catch","err","map","movie","name","orginal_name","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACD;;AACDJ,IAAAA,SAAS;AACV,GANQ,EAMN,CAACN,QAAD,CANM,CAAT;AAOA,QAAMW,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,KADU;AAElBC,IAAAA,KAAK,EAAE,MAFW;AAGlBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHM,GAApB;;AAOA,QAAMC,YAAY,GAAIC,SAAD,IAAe;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,QAAIb,UAAU,KAAK,EAAnB,EAAuBC,aAAa,CAAC,EAAD,CAAb,CAAvB,KACK;AACHT,MAAAA,YAAY,CAACqB,SAAD,CAAZ,CACGG,IADH,CACSC,GAAD,IAAS;AACb,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACApB,QAAAA,aAAa,CAACiB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAJH,EAKGkB,KALH,CAKUC,GAAD,IAAST,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CALlB;AAMD;AACF,GAXD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,cAA3B;AAAA,gBAEGG,MAAM,CAAC0B,GAAP,CAAYC,KAAD,iBACV;AACE,QAAA,OAAO,EAAE,MACPb,YAAY,CAACa,KAAK,CAACC,IAAN,IAAcD,KAAK,CAAC9B,KAApB,IAA6B8B,KAAK,CAACE,YAApC,CAFhB;AAKE,QAAA,SAAS,EAAG,eAAc9B,UAAU,IAAI,kBAAmB,EAL7D,CAKgE;AALhE;AAME,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAG4B,KAAK,CAACG,WAAT,GAAuBH,KAAK,CAACI,aACxC,EARH;AASE,QAAA,GAAG,EAAEJ,KAAK,CAACC;AATb,SAIOD,KAAK,CAACK,EAJb;AAAA;AAAA;AAAA;AAAA,cADD;AAFH;AAAA;AAAA;AAAA;AAAA,YAFF,EAmBG9B,UAAU,KAAK,EAAf,iBAAqB,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAnBxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GApDQb,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport ScrollContainer from \"react-indiana-drag-scroll\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const youtubeOpts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const movieClicked = (moviename) => {\r\n    console.log(moviename);\r\n    if (trailerUrl !== \"\") setTrailerUrl(\"\");\r\n    else {\r\n      movieTrailer(moviename)\r\n        .then((url) => {\r\n          const urlParamV = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParamV.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <ScrollContainer className=\"row__posters\">\r\n        {/* <div className=\"row__posters\"> */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() =>\r\n              movieClicked(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {/* </div> */}\r\n      </ScrollContainer>\r\n      {trailerUrl !== \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}
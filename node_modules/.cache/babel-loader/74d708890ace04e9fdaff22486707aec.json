{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luren\\\\Documents\\\\GitHub\\\\netflix-clone-diy\\\\src\\\\screens\\\\PlanScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlanScreen.css\"; // stripe\n// import { loadStripe } from \"@stripe/stripe-js\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlansScreen() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n  useEffect(() => {\n    db.collection(\"customers\").doc(user.uid).collection(\"subscriptions\").get().then(querySnapshot => {\n      querySnapshot.forEach(async subscription => {\n        setSubscription({\n          role: subscription.data().role,\n          current_period_end: subscription.data().current_period_end.seconds,\n          current_period_start: subscription.data().current_period_start.seconds\n        });\n      });\n    });\n  }, [user.uid]); // these products are created in the Stripe platform and streamed through to firebase\n\n  useEffect(() => {\n    db.collection(\"products\").where(\"active\", \"==\", true).get().then(querySnapshot => {\n      const products = {};\n      querySnapshot.forEach(async productDoc => {\n        products[productDoc.id] = productDoc.data();\n        const priceSnap = await productDoc.ref.collection(\"prices\").get(); // so we take the prices from our database and forEach them onto\n        // our new products array to display in React\n\n        priceSnap.docs.forEach(price => {\n          products[productDoc.id].prices = {\n            priceId: price.id,\n            priceData: price.data()\n          };\n        });\n      });\n      setProducts(products);\n    });\n  }, []); //   console.log(products);\n  //   console.log(subscription);\n\n  const loadCheckout = async priceId => {\n    const docRef = await db.collection(\"customers\").doc(user.uid).collection(\"checkout_sessions\").add({\n      price: priceId,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin\n    });\n    docRef.onSnapshot(async snap => {\n      const {\n        error,\n        sessionId\n      } = snap.data();\n\n      if (error) {\n        // Show an error to your customer and\n        // inspect your Cloud Function logs in the Firebase console.\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        // We have a session, let's redirect to Checkout\n        // Init Stripe\n        // this is the public publishable key on Stripe dashboard\n        const stripe = await loadStripe(\"pk_test_51JoIoHGUtNGYeO3RswXiOTPhERjirDTWfe3lDeNTthpA3TiuUwLahnSm2lkhiM8wA7DFWgHKi3jXGOiUSGOTEX2b002k00Rgy5\");\n        stripe.redirectToCheckout({\n          sessionId\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plansScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this), subscription && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Renewal date:\", \" \", new Date((subscription === null || subscription === void 0 ? void 0 : subscription.current_period_end) * 1000).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), Object.entries(products).map(([productId, productData]) => {\n      var _productData$name;\n\n      // TODO: add some logic to check if the user's subscription is active...\n      // isCurrentPackage is streamed from metadata on Stripe Product page with\n      // 'firebaseRole = premium', etc.\n      const isCurrentPackage = (_productData$name = productData.name) === null || _productData$name === void 0 ? void 0 : _productData$name.toLowerCase().includes(subscription === null || subscription === void 0 ? void 0 : subscription.role);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${isCurrentPackage && \"plansScreen__plan--disabled\"} plansScreen__plan`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plansScreen__info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: productData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: productData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => !isCurrentPackage && loadCheckout(productData.prices.priceId),\n          children: isCurrentPackage ? \"Current Plan\" : \"Subscribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlansScreen, \"60ANDhvF363l9RFtL6pi3jSO424=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlansScreen;\nexport default PlansScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlansScreen\");","map":{"version":3,"sources":["C:/Users/luren/Documents/GitHub/netflix-clone-diy/src/screens/PlanScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","PlansScreen","products","setProducts","user","subscription","setSubscription","collection","doc","uid","get","then","querySnapshot","forEach","role","data","current_period_end","seconds","current_period_start","where","productDoc","id","priceSnap","ref","docs","price","prices","priceId","priceData","loadCheckout","docRef","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","stripe","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","map","productId","productData","isCurrentPackage","name","toLowerCase","includes","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport db from \"../firebase\";\r\nimport \"./PlanScreen.css\";\r\n// stripe\r\n// import { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nfunction PlansScreen() {\r\n  const [products, setProducts] = useState([]);\r\n  const user = useSelector(selectUser);\r\n  const [subscription, setSubscription] = useState(null);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"customers\")\r\n      .doc(user.uid)\r\n      .collection(\"subscriptions\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach(async (subscription) => {\r\n          setSubscription({\r\n            role: subscription.data().role,\r\n            current_period_end: subscription.data().current_period_end.seconds,\r\n            current_period_start: subscription.data().current_period_start\r\n              .seconds,\r\n          });\r\n        });\r\n      });\r\n  }, [user.uid]);\r\n\r\n  // these products are created in the Stripe platform and streamed through to firebase\r\n  useEffect(() => {\r\n    db.collection(\"products\")\r\n      .where(\"active\", \"==\", true)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const products = {};\r\n        querySnapshot.forEach(async (productDoc) => {\r\n          products[productDoc.id] = productDoc.data();\r\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\r\n          // so we take the prices from our database and forEach them onto\r\n          // our new products array to display in React\r\n          priceSnap.docs.forEach((price) => {\r\n            products[productDoc.id].prices = {\r\n              priceId: price.id,\r\n              priceData: price.data(),\r\n            };\r\n          });\r\n        });\r\n        setProducts(products);\r\n      });\r\n  }, []);\r\n\r\n//   console.log(products);\r\n//   console.log(subscription);\r\n \r\n  const loadCheckout = async (priceId) => {\r\n    const docRef = await db\r\n      .collection(\"customers\")\r\n      .doc(user.uid)\r\n      .collection(\"checkout_sessions\")\r\n      .add({\r\n        price: priceId,\r\n        success_url: window.location.origin,\r\n        cancel_url: window.location.origin,\r\n      });\r\n\r\n      docRef.onSnapshot(async (snap) => {\r\n        const { error, sessionId } = snap.data();\r\n  \r\n        if (error) {\r\n          // Show an error to your customer and\r\n          // inspect your Cloud Function logs in the Firebase console.\r\n          alert(`An error occured: ${error.message}`);\r\n        }\r\n  \r\n        if (sessionId) {\r\n          // We have a session, let's redirect to Checkout\r\n          // Init Stripe\r\n  \r\n          // this is the public publishable key on Stripe dashboard\r\n          const stripe = await loadStripe(\r\n            \"pk_test_51JoIoHGUtNGYeO3RswXiOTPhERjirDTWfe3lDeNTthpA3TiuUwLahnSm2lkhiM8wA7DFWgHKi3jXGOiUSGOTEX2b002k00Rgy5\"\r\n          );\r\n          stripe.redirectToCheckout({ sessionId });\r\n        }\r\n      });\r\n    };\r\n\r\n    return (\r\n        <div className=\"plansScreen\">\r\n          <br />\r\n          {subscription && (\r\n            <p>\r\n              Renewal date:{\" \"}\r\n              {new Date(\r\n                subscription?.current_period_end * 1000\r\n              ).toLocaleDateString()}\r\n            </p>\r\n          )}\r\n          {Object.entries(products).map(([productId, productData]) => {\r\n            // TODO: add some logic to check if the user's subscription is active...\r\n            // isCurrentPackage is streamed from metadata on Stripe Product page with\r\n            // 'firebaseRole = premium', etc.\r\n            const isCurrentPackage = productData.name\r\n              ?.toLowerCase()\r\n              .includes(subscription?.role);\r\n    \r\n            return (\r\n              <div\r\n                key={productId}\r\n                className={`${\r\n                  isCurrentPackage && \"plansScreen__plan--disabled\"\r\n                } plansScreen__plan`}\r\n              >\r\n                <div className=\"plansScreen__info\">\r\n                  <h5>{productData.name}</h5>\r\n                  <h6>{productData.description}</h6>\r\n                </div>\r\n    \r\n                <button\r\n                  onClick={() =>\r\n                    !isCurrentPackage && loadCheckout(productData.prices.priceId)\r\n                  }\r\n                >\r\n                  {isCurrentPackage ? \"Current Plan\" : \"Subscribe\"}\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    export default PlansScreen;"]},"metadata":{},"sourceType":"module"}
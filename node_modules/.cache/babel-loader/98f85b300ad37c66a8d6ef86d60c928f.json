{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/luren/Documents/GitHub/netflix-clone-diy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/luren/Documents/GitHub/netflix-clone-diy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/luren/Documents/GitHub/netflix-clone-diy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import ScrollContainer from\"react-indiana-drag-scroll\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var youtubeOpts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var movieClicked=function movieClicked(moviename){console.log(moviename);if(trailerUrl!==\"\")setTrailerUrl(\"\");else{movieTrailer(moviename).then(function(url){var urlParamV=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParamV.get(\"v\"));}).catch(function(err){return console.log(err);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(ScrollContainer,{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return movieClicked(movie.name||movie.title||movie.orginal_name);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\")//use && if theres no else or : otherwise use ?\n,src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl!==\"\"&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:youtubeOpts})]});}export default Row;","map":{"version":3,"sources":["C:/Users/luren/Documents/GitHub/netflix-clone-diy/src/Row.js"],"names":["React","useState","useEffect","axios","ScrollContainer","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","youtubeOpts","height","width","playerVars","autoplay","movieClicked","moviename","console","log","then","url","urlParamV","URLSearchParams","URL","search","catch","err","map","movie","name","orginal_name","poster_path","backdrop_path","id"],"mappings":"qfAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,eAAP,KAA4B,2BAA5B,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CACA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC5C,cAA4BV,QAAQ,CAAC,EAAD,CAApC,wCAAOW,MAAP,eAAeC,SAAf,eACA,eAAoCZ,QAAQ,CAAC,EAAD,CAA5C,yCAAOa,UAAP,eAAmBC,aAAnB,eACAb,SAAS,CAAC,UAAM,SACCc,CAAAA,SADD,qIACd,qKACwBb,CAAAA,KAAK,CAACc,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,sDADc,4CAKdJ,SAAS,GACV,CANQ,CAMN,CAACN,QAAD,CANM,CAAT,CAOA,GAAMW,CAAAA,WAAW,CAAG,CAClBC,MAAM,CAAE,KADU,CAElBC,KAAK,CAAE,MAFW,CAGlBC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHM,CAApB,CAOA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAe,CAClCC,OAAO,CAACC,GAAR,CAAYF,SAAZ,EACA,GAAIb,UAAU,GAAK,EAAnB,CAAuBC,aAAa,CAAC,EAAD,CAAb,CAAvB,IACK,CACHT,YAAY,CAACqB,SAAD,CAAZ,CACGG,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACApB,aAAa,CAACiB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJH,EAKGmB,KALH,CAKS,SAACC,GAAD,QAAST,CAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CAAT,EALT,EAMD,CACF,CAXD,CAYA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK5B,KAAL,EADF,cAEE,KAAC,eAAD,EAAiB,SAAS,CAAC,cAA3B,UAEGG,MAAM,CAAC0B,GAAP,CAAW,SAACC,KAAD,qBACV,YACE,OAAO,CAAE,yBACPb,CAAAA,YAAY,CAACa,KAAK,CAACC,IAAN,EAAcD,KAAK,CAAC9B,KAApB,EAA6B8B,KAAK,CAACE,YAApC,CADL,EADX,CAKE,SAAS,uBAAiB9B,UAAU,EAAI,kBAA/B,CAAqD;AALhE,CAME,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAG4B,KAAK,CAACG,WAAT,CAAuBH,KAAK,CAACI,aADtC,CANL,CASE,GAAG,CAAEJ,KAAK,CAACC,IATb,EAIOD,KAAK,CAACK,EAJb,CADU,EAAX,CAFH,EAFF,CAmBG9B,UAAU,GAAK,EAAf,eAAqB,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,WAApC,EAnBxB,GADF,CAuBD,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport ScrollContainer from \"react-indiana-drag-scroll\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const youtubeOpts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const movieClicked = (moviename) => {\r\n    console.log(moviename);\r\n    if (trailerUrl !== \"\") setTrailerUrl(\"\");\r\n    else {\r\n      movieTrailer(moviename)\r\n        .then((url) => {\r\n          const urlParamV = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParamV.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <ScrollContainer className=\"row__posters\">\r\n        {/* <div className=\"row__posters\"> */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() =>\r\n              movieClicked(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {/* </div> */}\r\n      </ScrollContainer>\r\n      {trailerUrl !== \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}
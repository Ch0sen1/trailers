{"version":3,"sources":["Requests.js","axios.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","moviename","orginal_name","console","log","movieTrailer","then","url","urlParamV","URLSearchParams","URL","search","catch","err","poster_path","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","error","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","description","ProfileScreen","color","letterSpacing","fontWeight","padding","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","store","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iXAAMA,G,MAAU,oCAEHC,EAAW,CACtBC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,QCJLU,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,iC,OCiDIC,MA7Cf,WAEE,IAgBkBC,EAAQC,EAhB1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBV,EAAMW,IAAIrB,EAASE,uBAD3C,cACQoB,EADR,OAEEJ,EACEI,EAAQC,KAAKC,QACbC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJ7D,kBAOSN,GAPT,4CADc,uBAAC,WAAD,wBAUdO,KACC,IAQD,yBAAQC,UAAU,SAASC,MAAO,CAChCC,eAAgB,QAChBC,gBAAgB,2CAAD,cAA6ChB,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAOiB,cAApD,MACfC,mBAAoB,iBAHtB,UAKE,sBAAKL,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UACQ,OAALb,QAAK,IAALA,OAAA,EAAAA,EAAOmB,SAAP,OAAgBnB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOoB,QAAvB,OAA+BpB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOqB,iBAEzC,sBAAKR,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEF,oBAAIA,UAAU,sBAAd,UAlBYhB,EAmBD,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOsB,SAnBCxB,EAmBS,KAlBpB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO0B,OAAO,EAAGzB,EAAI,GAAK,MAAQD,QAqB5D,qBAAKgB,UAAU,2B,wBCdNW,MA7Bf,WACE,MAA2BzB,oBAAS,GAApC,mBAAO0B,EAAP,KAAaC,EAAb,KACMC,EAAUC,cAEVC,EAAmB,WACnBC,OAAOC,QAAU,IACnBL,GAAW,GAEXA,GAAW,IAWf,OAPAxB,qBAAU,WAER,OADA4B,OAAOE,iBAAiB,SAAUH,GAC3B,WACLC,OAAOG,oBAAoB,SAAUJ,MAEtC,IAGD,qBAAKhB,UAAS,cAASY,GAAQ,cAA/B,SACE,sBAAKZ,UAAU,eAAf,UACE,qBAAKqB,QAAS,kBAAMP,EAAQQ,KAAK,MAAMtB,UAAU,YAAYuB,IAAI,8EAA8EC,IAAI,KACnJ,qBAAKH,QAAS,kBAAMP,EAAQQ,KAAK,aAAatB,UAAU,cAAcuB,IAAI,gFAAgFC,IAAI,W,0CCmCvJC,MAtDf,YAA+C,IAAhCnB,EAA+B,EAA/BA,MAAOoB,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC9B,EAA4BzC,mBAAS,IAArC,mBAAO0C,EAAP,KAAeC,EAAf,KACA,EAAoC3C,mBAAS,IAA7C,mBAAO4C,EAAP,KAAmBC,EAAnB,KA2BA,OA1BA1C,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBV,EAAMW,IAAImC,GADlC,OACQlC,EADR,OAEEqC,EAAUrC,EAAQC,KAAKC,SAFzB,4CADc,uBAAC,WAAD,wBAKdK,KACC,CAAC2B,IAqBF,sBAAK1B,UAAU,MAAf,UACE,6BAAKM,IACL,cAAC,IAAD,CAAiBN,UAAU,eAA3B,SAEG4B,EAAOI,KAAI,SAAC7C,GAAD,OACV,qBACEkC,QAAS,kBAnBGY,EAoBG9C,EAAMoB,MAAQpB,EAAMmB,OAASnB,EAAM+C,aAnB1DC,QAAQC,IAAIH,QACO,KAAfH,EAAmBC,EAAc,IAEnCM,IAAaJ,GACVK,MAAK,SAACC,GACL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDZ,EAAcS,EAAUjD,IAAI,SAE7BqD,OAAM,SAACC,GAAD,OAASV,QAAQC,IAAIS,OATb,IAACZ,GAuBZjC,UAAS,sBAAiB2B,GAAc,oBACxCJ,IAAG,UA1CE,wCA0CF,OACDI,EAAaxC,EAAM2D,YAAc3D,EAAMiB,eAEzCoB,IAAKrC,EAAMoB,MALNpB,EAAM4D,SAUD,KAAfjB,GAAqB,cAAC,IAAD,CAASkB,QAASlB,EAAYmB,KAvCpC,CAClBC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACVC,SAAU,UCSDC,MAxBf,WACE,OACE,sBAAKtD,UAAU,aAAf,UAEE,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACEM,MAAM,oBACNoB,SAAUxD,EAASE,sBACnBuD,YAAU,IAEZ,cAAC,EAAD,CAAKrB,MAAM,eAAeoB,SAAUxD,EAASC,gBAC7C,cAAC,EAAD,CAAKmC,MAAM,YAAYoB,SAAUxD,EAASG,gBAC1C,cAAC,EAAD,CAAKiC,MAAM,gBAAgBoB,SAAUxD,EAASI,oBAC9C,cAAC,EAAD,CAAKgC,MAAM,gBAAgBoB,SAAUxD,EAASK,oBAC9C,cAAC,EAAD,CAAK+B,MAAM,gBAAgBoB,SAAUxD,EAASM,oBAC9C,cAAC,EAAD,CAAK8B,MAAM,iBAAiBoB,SAAUxD,EAASO,qBAC/C,cAAC,EAAD,CAAK6B,MAAM,gBAAgBoB,SAAUxD,EAASQ,yB,iCCT9C6E,G,cADcC,IAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,0CACZC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,aACjBC,EAAOV,IAASU,OAGPX,I,OC8BAY,MA9Cf,WAEE,IAAMC,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,MA2B3B,OACE,qBAAKrE,UAAU,gBAAf,SACE,iCACE,yCACA,uBAAOuE,IAAKH,EAAUI,KAAK,QAAQC,YAAY,UAC/C,uBAAOF,IAAKD,EAAaE,KAAK,WAAWC,YAAY,aACrD,wBAAQpD,QAlBC,SAAAqD,GACbA,EAAEC,iBACFC,YACEV,EACAE,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACpBxC,MAAK,SAACyC,GACN5C,QAAQC,IAAI2C,MACXnC,OAAM,SAAAC,GACPmC,MAAMnC,EAAIoC,aASR,qBACA,+BACE,sBAAMjF,UAAU,sBAAhB,8BACA,sBAAMqB,QAlCG,SAACqD,GAChBA,EAAEC,iBACFO,YACEhB,EACAE,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACpBxC,MAAK,SAACyC,GACN5C,QAAQC,IAAI2C,MACXnC,OAAM,SAAAC,GACPmC,MAAMnC,EAAIoC,aAyBmBjF,UAAU,sBAAnC,mCCNKmF,MAlCf,WACE,MAA4BjG,oBAAS,GAArC,mBAAOkG,EAAP,KAAeC,EAAf,KAEA,OACE,sBAAKrF,UAAU,eAAf,UACE,sBAAKA,UAAU,2BAAf,UACE,qBAAKA,UAAU,qBAAqBuB,IAAI,kEAAkEC,IAAI,KAC9G,wBAAQH,QAAS,kBAAMgE,GAAU,IAAOrF,UAAU,uBAAlD,qBACA,qBAAKA,UAAU,8BAEjB,qBAAKA,UAAU,qBAAf,SAEIoF,EACE,cAAC,EAAD,IAEE,qCACE,2EACA,qEACA,uGACA,qBAAKpF,UAAU,sBAAf,SACE,iCACE,uBAAOwE,KAAK,QAAQC,YAAY,gBAAgBlE,KAAK,GAAGwC,GAAG,KAC3D,wBAAQ1B,QAAS,kBAAMgE,GAAU,IAAOrF,UAAU,2BAAlD,uC,gBCdPsF,EAAYC,YAAY,CACnChF,KAAM,OACNiF,aAZmB,CACnBC,KAAM,MAaNC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GACPA,EAAMH,KAAO,SAQZ,EAA0BH,EAAUU,QAA5BL,EAAR,EAAQA,MAAOI,EAAf,EAAeA,OAETE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAEjCH,IAAf,Q,wBC8FmBY,MAvHnB,WACE,MAAgChH,mBAAS,IAAzC,mBAAOiH,EAAP,KAAiBC,EAAjB,KACMX,EAAOY,YAAYJ,GACzB,EAAwC/G,mBAAS,MAAjD,mBAAOoH,EAAP,KAAqBC,EAArB,KAEAlH,qBAAU,WACRkE,EAAGiD,WAAW,aACXC,IAAIhB,EAAKiB,KACTF,WAAW,iBACXjH,MACA+C,MAAK,SAACqE,GACLA,EAAcC,QAAd,uCAAsB,WAAON,GAAP,SAAAhH,EAAA,sDACpBiH,EAAgB,CACdM,KAAMP,EAAa7G,OAAOoH,KAC1BC,mBAAoBR,EAAa7G,OAAOqH,mBAAmBC,QAC3DC,qBAAsBV,EAAa7G,OAAOuH,qBACvCD,UALe,2CAAtB,4DASH,CAACtB,EAAKiB,MAGTrH,qBAAU,WACRkE,EAAGiD,WAAW,YACXS,MAAM,SAAU,MAAM,GACtB1H,MACA+C,MAAK,SAACqE,GACL,IAAMR,EAAW,GACjBQ,EAAcC,QAAd,uCAAsB,WAAOM,GAAP,SAAA5H,EAAA,6DACpB6G,EAASe,EAAWnE,IAAMmE,EAAWzH,OADjB,SAEIyH,EAAW3C,IAAIiC,WAAW,UAAUjH,MAFxC,cAKV4H,KAAKP,SAAQ,SAACQ,GACtBjB,EAASe,EAAWnE,IAAIsE,OAAS,CAC/BC,QAASF,EAAMrE,GACfwE,UAAWH,EAAM3H,WARD,2CAAtB,uDAYA2G,EAAYD,QAEf,IAKH,IAAMqB,EAAY,uCAAG,WAAOF,GAAP,SAAAhI,EAAA,sEACEiE,EAClBiD,WAAW,aACXC,IAAIhB,EAAKiB,KACTF,WAAW,qBACXiB,IAAI,CACHL,MAAOE,EACPI,YAAazG,OAAO0G,SAASC,OAC7BC,WAAY5G,OAAO0G,SAASC,SARb,cAWVE,WAAP,uCAAkB,WAAOC,GAAP,mBAAAzI,EAAA,2DACayI,EAAKtI,OAA1BuI,EADQ,EACRA,MAAOC,EADC,EACDA,UAEXD,GAGFhD,MAAM,qBAAD,OAAsBgD,EAAM/C,WAG/BgD,EATY,gCAUOC,YACnB,+GAXY,cAaPC,mBAAmB,CAAEF,cAbd,2CAAlB,uDAXiB,2CAAH,sDA6BhB,OACI,sBAAKjI,UAAU,cAAf,UACE,uBACCsG,GACC,8CACgB,IACb,IAAI8B,KACgC,KAAvB,OAAZ9B,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,qBACduB,wBAGLC,OAAOC,QAAQpC,GAAUnE,KAAI,YAA+B,IAAD,qBAA5BwG,EAA4B,KAAjBC,EAAiB,KACpDC,EAAgB,UAAGD,EAAYlI,YAAf,aAAG,EACrBoI,cACDC,SAFsB,OAEbtC,QAFa,IAEbA,OAFa,EAEbA,EAAcO,MAE1B,OACE,sBAEE7G,UAAS,UACP0I,GAAoB,8BADb,sBAFX,UAME,sBAAK1I,UAAU,oBAAf,UACE,6BAAKyI,EAAYlI,OACjB,6BAAKkI,EAAYI,iBAGnB,wBACExH,QAAS,kBACNqH,GAAoBlB,EAAaiB,EAAYpB,OAAOC,UAFzD,SAKGoB,EAAmB,eAAiB,gBAflCF,UC7DNM,MAlCf,YAAiC,IAARvI,EAAO,EAAPA,KAGhBkF,EAAOY,YAAYJ,GAGzB,OACI,sBAAKjG,UAAU,UAAf,UACA,cAAC,EAAD,IACA,sBAAKA,UAAU,gBAAf,UACI,8CACA,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,yBAAf,UACA,qBAAKuB,IAAI,qCAAmCC,IAAI,eAAexB,UAAU,iBACrE,oBAAIC,MAAO,CAAC8I,MAAM,QAASC,cAAc,OAAQC,WAAW,MAAOC,QAAQ,OAA3E,SAAoF3I,OAGxF,sBAAKP,UAAU,mBAAf,UACI,6BAAKyF,EAAK0D,QACV,sBAAKnJ,UAAU,iBAAf,UACA,uCAEN,cAAC,EAAD,OAGM,wBAAQA,UAAU,mBAAmBqB,QAAS,kBAAM6C,EAAKkF,WAAzD,mCCoBJC,MAzCf,WACE,IAAM5D,EAAOY,YAAYJ,GACnBqD,EAAWC,cAmBjB,OAjBAlK,qBAAU,WAcR,OAboBmK,YAAmBtF,GAAM,SAAAuF,GACvCA,GAEFtH,QAAQC,IAAIqH,GACZH,EAAS3D,EAAM,CACbe,IAAK+C,EAAS/C,IACdyC,MAAOM,EAASN,UAIlBG,EAASvD,QAIZ,CAACuD,IAGF,qBAAKtJ,UAAU,MAAf,SACE,cAAC,IAAD,UACIyF,EAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiE,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,SAPJ,cAAC,EAAD,SClCGE,EAAQC,YAAe,CAClCC,QAAS,CACPrE,KAAMsE,KCOUC,QACW,cAA7B/I,OAAO0G,SAASsC,UAEe,UAA7BhJ,OAAO0G,SAASsC,UAEhBhJ,OAAO0G,SAASsC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpI,MAAK,SAACqI,GAClCA,EAAaC,iB","file":"static/js/main.386504c4.chunk.js","sourcesContent":["const API_KEY = 'f81980ff410e46f422d64ddf3a56dddd'\r\n\r\nexport const requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\n// https://api.themoviedb.org/3/discover/tv?api_key=f81980ff410e46f422d64ddf3a56dddd&with_networks=213","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3'\r\n})\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react'\r\nimport './Banner.css'\r\nimport { requests } from './Requests';\r\nimport axios from './axios'\r\n\r\n\r\n\r\nfunction Banner() {\r\n\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals)\r\n      setMovie(\r\n        request.data.results[\r\n        Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      )\r\n      return request\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n\r\n  function truncate(string, n) {\r\n    return string?.length > n ? string.substr(0, n - 1) + '...' : string\r\n  }\r\n\r\n  return (\r\n    <header className=\"banner\" style={{\r\n      backgroundSize: 'cover',\r\n      backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n      backgroundPosition: \"center center\"\r\n    }}>\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router';\r\nimport './Nav.css'\r\n\r\nfunction Nav () {\r\n  const [show, handleShow] = useState(false);\r\n  const history = useHistory()\r\n\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', transitionNavBar)\r\n    return () => {\r\n      window.removeEventListener('scroll', transitionNavBar)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={`nav ${show && 'nav__black'}`}>\r\n      <div className=\"nav__content\">\r\n        <img onClick={() => history.push('/')} className=\"nav__logo\" src=\"https://logos-world.net/wp-content/uploads/2020/04/Netflix-Logo-700x394.png\" alt=\"\" />\r\n        <img onClick={() => history.push('/profile')} className=\"nav__avatar\" src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport ScrollContainer from \"react-indiana-drag-scroll\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const youtubeOpts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const movieClicked = (moviename) => {\r\n    console.log(moviename);\r\n    if (trailerUrl !== \"\") setTrailerUrl(\"\");\r\n    else {\r\n      movieTrailer(moviename)\r\n        .then((url) => {\r\n          const urlParamV = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParamV.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <ScrollContainer className=\"row__posters\">\r\n        {/* <div className=\"row__posters\"> */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() =>\r\n              movieClicked(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {/* </div> */}\r\n      </ScrollContainer>\r\n      {trailerUrl !== \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react'\r\nimport Banner from '../Banner'\r\nimport './HomeScreen.css'\r\nimport Nav from '../Nav'\r\nimport { requests } from '../Requests'\r\nimport Row from '../Row'\r\n\r\nfunction HomeScreen () {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      {/* Nav */}\r\n      <Nav />\r\n      {/* Banner */}\r\n      <Banner />\r\n      {/* Row */}\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","// v9 compat packages are API compatible with v8 code\r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/auth\";\r\nimport \"firebase/compat/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDg1p-t76IotvW20zwcDbojbZolgp6k3Yo\",\r\n  authDomain: \"netflix-clone-diy-2e4a3.firebaseapp.com\",\r\n  projectId: \"netflix-clone-diy-2e4a3\",\r\n  storageBucket: \"netflix-clone-diy-2e4a3.appspot.com\",\r\n  messagingSenderId: \"598919878098\",\r\n  appId: \"1:598919878098:web:27a88a5fc7a4c93e51a40b\",\r\n  measurementId: \"G-8TEBWSMRLB\"\r\n};\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport {auth}\r\nexport default db;","import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from '@firebase/auth'\r\nimport React, { useRef } from 'react'\r\nimport { auth } from '../firebase'\r\nimport './SignupScreen.css'\r\n\r\nfunction SignupScreen () {\r\n\r\n  const emailRef = useRef(null)\r\n  const passwordRef = useRef(null)\r\n\r\n  const register = (e) => {\r\n    e.preventDefault()\r\n    createUserWithEmailAndPassword(\r\n      auth,\r\n      emailRef.current.value,\r\n      passwordRef.current.value\r\n    ).then((authUser) => {\r\n      console.log(authUser);\r\n    }).catch(err => {\r\n      alert(err.message)\r\n    })\r\n  }\r\n\r\n  const signIn = e => {\r\n    e.preventDefault()\r\n    signInWithEmailAndPassword(\r\n      auth,\r\n      emailRef.current.value,\r\n      passwordRef.current.value\r\n    ).then((authUser) => {\r\n      console.log(authUser);\r\n    }).catch(err => {\r\n      alert(err.message)\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"signup-screen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n        <button onClick={signIn}>Sign In</button>\r\n        <h4>\r\n          <span className=\"signup-screen__grey\">New to Netflix? </span>\r\n          <span onClick={register} className=\"signup-screen__link\">Sign Up now.</span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignupScreen\r\n","import React, { useState } from 'react'\r\nimport './LoginScreen.css'\r\nimport SignupScreen from './SignupScreen'\r\n\r\nfunction LoginScreen () {\r\n  const [signIn, setSignIn] = useState(false)\r\n\r\n  return (\r\n    <div className=\"login-screen\">\r\n      <div className=\"login-screen__background\">\r\n        <img className=\"login-screen__logo\" src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n        <button onClick={() => setSignIn(true)} className=\"login-screen__button\">Sign In</button>\r\n        <div className=\"login-screen__gradient\"></div>\r\n      </div>\r\n      <div className=\"login-screen__body\">\r\n        {\r\n          signIn ?\r\n            <SignupScreen /> :\r\n            (\r\n              <>\r\n                <h1>Unlimited films, TV  programmes and more.</h1>\r\n                <h2>Watch anything. Cannel at any time.</h2>\r\n                <h3>Read to watch? Enter your email to create or restart your membership.</h3>\r\n                <div className=\"login-screen__input\">\r\n                  <form>\r\n                    <input type=\"email\" placeholder=\"Email Address\" name=\"\" id=\"\" />\r\n                    <button onClick={() => setSignIn(true)} className=\"login-screen__getstarted\">get started</button>\r\n                  </form>\r\n                </div>\r\n              </>\r\n            )\r\n\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  user: null\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload\r\n    },\r\n    logout: (state) => {\r\n      state.user = null\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n});\r\n\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport db from \"../firebase\";\r\nimport \"./PlanScreen.css\";\r\n// stripe\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nfunction PlansScreen() {\r\n  const [products, setProducts] = useState([]);\r\n  const user = useSelector(selectUser);\r\n  const [subscription, setSubscription] = useState(null);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"customers\")\r\n      .doc(user.uid)\r\n      .collection(\"subscriptions\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach(async (subscription) => {\r\n          setSubscription({\r\n            role: subscription.data().role,\r\n            current_period_end: subscription.data().current_period_end.seconds,\r\n            current_period_start: subscription.data().current_period_start\r\n              .seconds,\r\n          });\r\n        });\r\n      });\r\n  }, [user.uid]);\r\n\r\n\r\n  useEffect(() => {\r\n    db.collection(\"products\")\r\n      .where(\"active\", \"==\", true)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const products = {};\r\n        querySnapshot.forEach(async (productDoc) => {\r\n          products[productDoc.id] = productDoc.data();\r\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\r\n          // so we take the prices from our database and forEach them onto\r\n          // our new products array to display in React\r\n          priceSnap.docs.forEach((price) => {\r\n            products[productDoc.id].prices = {\r\n              priceId: price.id,\r\n              priceData: price.data(),\r\n            };\r\n          });\r\n        });\r\n        setProducts(products);\r\n      });\r\n  }, []);\r\n\r\n//   console.log(products);\r\n//   console.log(subscription);\r\n \r\n  const loadCheckout = async (priceId) => {\r\n    const docRef = await db\r\n      .collection(\"customers\")\r\n      .doc(user.uid)\r\n      .collection(\"checkout_sessions\")\r\n      .add({\r\n        price: priceId,\r\n        success_url: window.location.origin,\r\n        cancel_url: window.location.origin,\r\n      });\r\n\r\n      docRef.onSnapshot(async (snap) => {\r\n        const { error, sessionId } = snap.data();\r\n  \r\n        if (error) {\r\n          // Show an error to your customer and\r\n          // inspect your Cloud Function logs in the Firebase console.\r\n          alert(`An error occured: ${error.message}`);\r\n        }\r\n  \r\n        if (sessionId) {\r\n          const stripe = await loadStripe(\r\n            \"pk_test_51JppQuKkj70g0AsOjZFgkuWkeeyIlif0GJuX3FYtVz3XLTJ69vXnACnPrTgRKS9b82OREwMg2BA9NPhZZf5v3o2y00zIUizkFt\"\r\n          );\r\n          stripe.redirectToCheckout({ sessionId });\r\n        }\r\n      });\r\n    };\r\n\r\n    return (\r\n        <div className=\"plansScreen\">\r\n          <br />\r\n          {subscription && (\r\n            <p>\r\n              Renewal date:{\" \"}\r\n              {new Date(\r\n                subscription?.current_period_end * 1000\r\n              ).toLocaleDateString()}\r\n            </p>\r\n          )}\r\n          {Object.entries(products).map(([productId, productData]) => {\r\n            const isCurrentPackage = productData.name\r\n              ?.toLowerCase()\r\n              .includes(subscription?.role);\r\n    \r\n            return (\r\n              <div\r\n                key={productId}\r\n                className={`${\r\n                  isCurrentPackage && \"plansScreen__plan--disabled\"\r\n                } plansScreen__plan`}\r\n              >\r\n                <div className=\"plansScreen__info\">\r\n                  <h5>{productData.name}</h5>\r\n                  <h6>{productData.description}</h6>\r\n                </div>\r\n    \r\n                <button\r\n                  onClick={() =>\r\n                    !isCurrentPackage && loadCheckout(productData.prices.priceId)\r\n                  }\r\n                >\r\n                  {isCurrentPackage ? \"Current Plan\" : \"Subscribe\"}\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    export default PlansScreen;","import React from 'react'\r\nimport Nav from '../Nav'\r\nimport './ProfileScreen.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { auth } from '../firebase';\r\nimport PlanScreen from './PlanScreen'\r\n\r\nfunction ProfileScreen ({name}) {\r\n\r\n   // here {name} is pulled from the firebase userAuth.displayName on user sign in in App.js\r\n   const user = useSelector(selectUser)\r\n   // console.log(\"display Name \", user.displayName)\r\n   // console.log(\"user object\", user)\r\n   return (\r\n       <div className='profile'>\r\n       <Nav/>\r\n       <div className=\"profile__body\">\r\n           <h1>Edit Profile</h1>\r\n           <div className=\"profile__info\">\r\n               <div className=\"profile__img-container\">\r\n               <img src=\"assets\\images\\netflix_avatar.png\" alt=\"User Profile\" className='profile__img'/>\r\n                   <h3 style={{color:'white', letterSpacing:'.5px', fontWeight:'400', padding:'5px'}}>{name}</h3>\r\n               </div>\r\n               \r\n               <div className=\"profile__details\">\r\n                   <h2>{user.email}</h2>\r\n                   <div className=\"profile__plans\">\r\n                   <h3>Plans</h3>\r\n\r\n             <PlanScreen />\r\n                       \r\n                   </div>\r\n                   <button className='profile__signOut' onClick={() => auth.signOut()}>Sign Out</button>\r\n               </div>\r\n           </div>\r\n       </div>\r\n           \r\n       </div>\r\n   )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\n\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport { onAuthStateChanged } from '@firebase/auth';\r\nimport { auth } from './firebase';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\nfunction App () {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, userAuth => {\r\n      if (userAuth) {\r\n        // logged in\r\n        console.log(userAuth);\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email: userAuth.email\r\n        }))\r\n      } else {\r\n        // logged out\r\n        dispatch(logout)\r\n      }\r\n    })\r\n    return unsubscribe\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}